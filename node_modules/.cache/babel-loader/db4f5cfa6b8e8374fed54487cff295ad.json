{"ast":null,"code":"import KDBush from 'kdbush';\nconst defaultOptions = {\n  minZoom: 0,\n  // min zoom to generate clusters on\n  maxZoom: 16,\n  // max zoom level to cluster the points on\n  minPoints: 2,\n  // minimum points to form a cluster\n  radius: 40,\n  // cluster radius in pixels\n  extent: 512,\n  // tile extent (radius is calculated relative to it)\n  nodeSize: 64,\n  // size of the KD-tree leaf node, affects performance\n  log: false,\n  // whether to log timing info\n  // whether to generate numeric ids for input features (in vector tiles)\n  generateId: false,\n  // a reduce function for calculating custom cluster properties\n  reduce: null,\n  // (accumulated, props) => { accumulated.sum += props.sum; }\n  // properties to use for individual points when running the reducer\n  map: props => props // props => ({sum: props.my_value})\n\n};\n\nconst fround = Math.fround || (tmp => x => {\n  tmp[0] = +x;\n  return tmp[0];\n})(new Float32Array(1));\n\nexport default class Supercluster {\n  constructor(options) {\n    this.options = extend(Object.create(defaultOptions), options);\n    this.trees = new Array(this.options.maxZoom + 1);\n  }\n\n  load(points) {\n    const {\n      log,\n      minZoom,\n      maxZoom,\n      nodeSize\n    } = this.options;\n    if (log) console.time('total time');\n    const timerId = `prepare ${points.length} points`;\n    if (log) console.time(timerId);\n    this.points = points; // generate a cluster object for each point and index input points into a KD-tree\n\n    let clusters = [];\n\n    for (let i = 0; i < points.length; i++) {\n      if (!points[i].geometry) continue;\n      clusters.push(createPointCluster(points[i], i));\n    }\n\n    this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n    if (log) console.timeEnd(timerId); // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n    // results in a cluster hierarchy across zoom levels\n\n    for (let z = maxZoom; z >= minZoom; z--) {\n      const now = +Date.now(); // create a new set of clusters for the zoom and index them with a KD-tree\n\n      clusters = this._cluster(clusters, z);\n      this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n      if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n    }\n\n    if (log) console.timeEnd('total time');\n    return this;\n  }\n\n  getClusters(bbox, zoom) {\n    let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n    const minLat = Math.max(-90, Math.min(90, bbox[1]));\n    let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n    const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n    if (bbox[2] - bbox[0] >= 360) {\n      minLng = -180;\n      maxLng = 180;\n    } else if (minLng > maxLng) {\n      const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n      const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n      return easternHem.concat(westernHem);\n    }\n\n    const tree = this.trees[this._limitZoom(zoom)];\n\n    const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n    const clusters = [];\n\n    for (const id of ids) {\n      const c = tree.points[id];\n      clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n    }\n\n    return clusters;\n  }\n\n  getChildren(clusterId) {\n    const originId = this._getOriginId(clusterId);\n\n    const originZoom = this._getOriginZoom(clusterId);\n\n    const errorMsg = 'No cluster with the specified id.';\n    const index = this.trees[originZoom];\n    if (!index) throw new Error(errorMsg);\n    const origin = index.points[originId];\n    if (!origin) throw new Error(errorMsg);\n    const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n    const ids = index.within(origin.x, origin.y, r);\n    const children = [];\n\n    for (const id of ids) {\n      const c = index.points[id];\n\n      if (c.parentId === clusterId) {\n        children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n      }\n    }\n\n    if (children.length === 0) throw new Error(errorMsg);\n    return children;\n  }\n\n  getLeaves(clusterId, limit, offset) {\n    limit = limit || 10;\n    offset = offset || 0;\n    const leaves = [];\n\n    this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n    return leaves;\n  }\n\n  getTile(z, x, y) {\n    const tree = this.trees[this._limitZoom(z)];\n\n    const z2 = Math.pow(2, z);\n    const {\n      extent,\n      radius\n    } = this.options;\n    const p = radius / extent;\n    const top = (y - p) / z2;\n    const bottom = (y + 1 + p) / z2;\n    const tile = {\n      features: []\n    };\n\n    this._addTileFeatures(tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom), tree.points, x, y, z2, tile);\n\n    if (x === 0) {\n      this._addTileFeatures(tree.range(1 - p / z2, top, 1, bottom), tree.points, z2, y, z2, tile);\n    }\n\n    if (x === z2 - 1) {\n      this._addTileFeatures(tree.range(0, top, p / z2, bottom), tree.points, -1, y, z2, tile);\n    }\n\n    return tile.features.length ? tile : null;\n  }\n\n  getClusterExpansionZoom(clusterId) {\n    let expansionZoom = this._getOriginZoom(clusterId) - 1;\n\n    while (expansionZoom <= this.options.maxZoom) {\n      const children = this.getChildren(clusterId);\n      expansionZoom++;\n      if (children.length !== 1) break;\n      clusterId = children[0].properties.cluster_id;\n    }\n\n    return expansionZoom;\n  }\n\n  _appendLeaves(result, clusterId, limit, offset, skipped) {\n    const children = this.getChildren(clusterId);\n\n    for (const child of children) {\n      const props = child.properties;\n\n      if (props && props.cluster) {\n        if (skipped + props.point_count <= offset) {\n          // skip the whole cluster\n          skipped += props.point_count;\n        } else {\n          // enter the cluster\n          skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped); // exit the cluster\n        }\n      } else if (skipped < offset) {\n        // skip a single point\n        skipped++;\n      } else {\n        // add a single point\n        result.push(child);\n      }\n\n      if (result.length === limit) break;\n    }\n\n    return skipped;\n  }\n\n  _addTileFeatures(ids, points, x, y, z2, tile) {\n    for (const i of ids) {\n      const c = points[i];\n      const isCluster = c.numPoints;\n      let tags, px, py;\n\n      if (isCluster) {\n        tags = getClusterProperties(c);\n        px = c.x;\n        py = c.y;\n      } else {\n        const p = this.points[c.index];\n        tags = p.properties;\n        px = lngX(p.geometry.coordinates[0]);\n        py = latY(p.geometry.coordinates[1]);\n      }\n\n      const f = {\n        type: 1,\n        geometry: [[Math.round(this.options.extent * (px * z2 - x)), Math.round(this.options.extent * (py * z2 - y))]],\n        tags\n      }; // assign id\n\n      let id;\n\n      if (isCluster) {\n        id = c.id;\n      } else if (this.options.generateId) {\n        // optionally generate id\n        id = c.index;\n      } else if (this.points[c.index].id) {\n        // keep id if already assigned\n        id = this.points[c.index].id;\n      }\n\n      if (id !== undefined) f.id = id;\n      tile.features.push(f);\n    }\n  }\n\n  _limitZoom(z) {\n    return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n  }\n\n  _cluster(points, zoom) {\n    const clusters = [];\n    const {\n      radius,\n      extent,\n      reduce,\n      minPoints\n    } = this.options;\n    const r = radius / (extent * Math.pow(2, zoom)); // loop through each point\n\n    for (let i = 0; i < points.length; i++) {\n      const p = points[i]; // if we've already visited the point at this zoom level, skip it\n\n      if (p.zoom <= zoom) continue;\n      p.zoom = zoom; // find all nearby points\n\n      const tree = this.trees[zoom + 1];\n      const neighborIds = tree.within(p.x, p.y, r);\n      const numPointsOrigin = p.numPoints || 1;\n      let numPoints = numPointsOrigin; // count the number of points in a potential cluster\n\n      for (const neighborId of neighborIds) {\n        const b = tree.points[neighborId]; // filter out neighbors that are already processed\n\n        if (b.zoom > zoom) numPoints += b.numPoints || 1;\n      }\n\n      if (numPoints >= minPoints) {\n        // enough points to form a cluster\n        let wx = p.x * numPointsOrigin;\n        let wy = p.y * numPointsOrigin;\n        let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null; // encode both zoom and point index on which the cluster originated -- offset by total length of features\n\n        const id = (i << 5) + (zoom + 1) + this.points.length;\n\n        for (const neighborId of neighborIds) {\n          const b = tree.points[neighborId];\n          if (b.zoom <= zoom) continue;\n          b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n          const numPoints2 = b.numPoints || 1;\n          wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n\n          wy += b.y * numPoints2;\n          b.parentId = id;\n\n          if (reduce) {\n            if (!clusterProperties) clusterProperties = this._map(p, true);\n            reduce(clusterProperties, this._map(b));\n          }\n        }\n\n        p.parentId = id;\n        clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n      } else {\n        // left points as unclustered\n        clusters.push(p);\n\n        if (numPoints > 1) {\n          for (const neighborId of neighborIds) {\n            const b = tree.points[neighborId];\n            if (b.zoom <= zoom) continue;\n            b.zoom = zoom;\n            clusters.push(b);\n          }\n        }\n      }\n    }\n\n    return clusters;\n  } // get index of the point from which the cluster originated\n\n\n  _getOriginId(clusterId) {\n    return clusterId - this.points.length >> 5;\n  } // get zoom of the point from which the cluster originated\n\n\n  _getOriginZoom(clusterId) {\n    return (clusterId - this.points.length) % 32;\n  }\n\n  _map(point, clone) {\n    if (point.numPoints) {\n      return clone ? extend({}, point.properties) : point.properties;\n    }\n\n    const original = this.points[point.index].properties;\n    const result = this.options.map(original);\n    return clone && result === original ? extend({}, result) : result;\n  }\n\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n  return {\n    x: fround(x),\n    // weighted cluster center; round for consistency with Float32Array index\n    y: fround(y),\n    zoom: Infinity,\n    // the last zoom the cluster was processed at\n    id,\n    // encodes index of the first child of the cluster and its zoom level\n    parentId: -1,\n    // parent cluster id\n    numPoints,\n    properties\n  };\n}\n\nfunction createPointCluster(p, id) {\n  const [x, y] = p.geometry.coordinates;\n  return {\n    x: fround(lngX(x)),\n    // projected point coordinates\n    y: fround(latY(y)),\n    zoom: Infinity,\n    // the last zoom the point was processed at\n    index: id,\n    // index of the source feature in the original input array,\n    parentId: -1 // parent cluster id\n\n  };\n}\n\nfunction getClusterJSON(cluster) {\n  return {\n    type: 'Feature',\n    id: cluster.id,\n    properties: getClusterProperties(cluster),\n    geometry: {\n      type: 'Point',\n      coordinates: [xLng(cluster.x), yLat(cluster.y)]\n    }\n  };\n}\n\nfunction getClusterProperties(cluster) {\n  const count = cluster.numPoints;\n  const abbrev = count >= 10000 ? `${Math.round(count / 1000)}k` : count >= 1000 ? `${Math.round(count / 100) / 10}k` : count;\n  return extend(extend({}, cluster.properties), {\n    cluster: true,\n    cluster_id: cluster.id,\n    point_count: count,\n    point_count_abbreviated: abbrev\n  });\n} // longitude/latitude to spherical mercator in [0..1] range\n\n\nfunction lngX(lng) {\n  return lng / 360 + 0.5;\n}\n\nfunction latY(lat) {\n  const sin = Math.sin(lat * Math.PI / 180);\n  const y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n  return y < 0 ? 0 : y > 1 ? 1 : y;\n} // spherical mercator to longitude/latitude\n\n\nfunction xLng(x) {\n  return (x - 0.5) * 360;\n}\n\nfunction yLat(y) {\n  const y2 = (180 - y * 360) * Math.PI / 180;\n  return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n  for (const id in src) dest[id] = src[id];\n\n  return dest;\n}\n\nfunction getX(p) {\n  return p.x;\n}\n\nfunction getY(p) {\n  return p.y;\n}","map":{"version":3,"sources":["/home/ec2-user/environment/405Found/node_modules/supercluster/index.js"],"names":["KDBush","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","nodeSize","log","generateId","reduce","map","props","fround","Math","tmp","x","Float32Array","Supercluster","constructor","options","extend","Object","create","trees","Array","load","points","console","time","timerId","length","clusters","i","geometry","push","createPointCluster","getX","getY","timeEnd","z","now","Date","_cluster","getClusters","bbox","zoom","minLng","minLat","max","min","maxLng","maxLat","easternHem","westernHem","concat","tree","_limitZoom","ids","range","lngX","latY","id","c","numPoints","getClusterJSON","index","getChildren","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","Error","origin","r","pow","within","y","children","parentId","getLeaves","limit","offset","leaves","_appendLeaves","getTile","z2","p","top","bottom","tile","features","_addTileFeatures","getClusterExpansionZoom","expansionZoom","properties","cluster_id","result","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","coordinates","f","type","round","undefined","neighborIds","numPointsOrigin","neighborId","b","wx","wy","clusterProperties","_map","numPoints2","createCluster","point","clone","original","Infinity","xLng","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","exp","dest","src"],"mappings":"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","sourcesContent":["\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            if (numPoints >= minPoints) { // enough points to form a cluster\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n"]},"metadata":{},"sourceType":"module"}