{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/405Found/src/pages/userMap/UserMap.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport useSwr from \"swr\";\nimport GoogleMapReact from \"google-map-react\";\nimport useSupercluster from \"use-supercluster\";\nimport Modal from \"react-modal\";\nimport ModalComponent from \"../../components/modal/ModalComponent\";\nimport './userMap.css';\nimport { social_Distancing_MapData } from '../../dummyData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst Marker = ({\n  children\n}) => children;\n\n_c = Marker;\nModal.setAppElement(\"#root\");\n\nconst UserMap = () => {\n  _s();\n\n  const mapRef = useRef();\n  const [bounds, setBounds] = useState(null);\n  const [zoom, setZoom] = useState(10);\n  const [isOpen, setIsOpen] = useState(false);\n  const [person, setPerson] = useState(null);\n  const [employeeId, setEmployeeId] = useState(null);\n\n  function toggleModal(event, personName, empId) {\n    setIsOpen(!isOpen);\n    setPerson(personName);\n    setEmployeeId(empId);\n  } //   const url =\n  //     \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n  //   const { data, error } = useSwr(url, { fetcher });\n  //   const peopleClusterData = data && !error ? data.slice(0, 200) : [];\n\n\n  const data = social_Distancing_MapData;\n  const peopleClusterData = data.slice(0, 10);\n  const points = peopleClusterData.map(people => ({\n    type: \"Feature\",\n    properties: {\n      cluster: false,\n      peopleId: people.id,\n      category: people.category,\n      username: people.location.person.name,\n      empId: people.location.person.id\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [parseFloat(people.location.longitude), parseFloat(people.location.latitude)]\n    }\n  }));\n  const {\n    clusters,\n    supercluster\n  } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ModalComponent, {\n      isOpen: isOpen,\n      toggleModal: toggleModal,\n      person: person,\n      employeeId: employeeId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: process.env.REACT_APP_GOOGLE_KEY\n      },\n      defaultCenter: {\n        lat: 52.6376,\n        lng: -1.135171\n      },\n      defaultZoom: 10,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map\n      }) => {\n        mapRef.current = map;\n      },\n      onChange: ({\n        zoom,\n        bounds\n      }) => {\n        setZoom(zoom);\n        setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n      },\n      children: clusters.map(cluster => {\n        const [longitude, latitude] = cluster.geometry.coordinates;\n        const {\n          cluster: isCluster,\n          point_count: pointCount\n        } = cluster.properties;\n\n        if (isCluster) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            lat: latitude,\n            lng: longitude,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cluster-marker\",\n              style: {\n                width: `${10 + pointCount / points.length * 20}px`,\n                height: `${10 + pointCount / points.length * 20}px`\n              },\n              onClick: () => {\n                const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 20);\n                mapRef.current.setZoom(expansionZoom);\n                mapRef.current.panTo({\n                  lat: latitude,\n                  lng: longitude\n                });\n              },\n              children: pointCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, `cluster-${cluster.id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          lat: latitude,\n          lng: longitude,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"people-marker\",\n            onClick: event => {\n              toggleModal(event, cluster.properties.username, cluster.properties.empId);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/person.svg\",\n              alt: \"person\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, `people-${cluster.properties.peopleId}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserMap, \"y6zEPk1rGo8V7G5dEHZQAa87Qrw=\", false, function () {\n  return [useSupercluster];\n});\n\n_c2 = UserMap;\nexport default UserMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Marker\");\n$RefreshReg$(_c2, \"UserMap\");","map":{"version":3,"sources":["/home/ec2-user/environment/405Found/src/pages/userMap/UserMap.jsx"],"names":["React","useState","useRef","useSwr","GoogleMapReact","useSupercluster","Modal","ModalComponent","social_Distancing_MapData","fetcher","args","fetch","then","response","json","Marker","children","setAppElement","UserMap","mapRef","bounds","setBounds","zoom","setZoom","isOpen","setIsOpen","person","setPerson","employeeId","setEmployeeId","toggleModal","event","personName","empId","data","peopleClusterData","slice","points","map","people","type","properties","cluster","peopleId","id","category","username","location","name","geometry","coordinates","parseFloat","longitude","latitude","clusters","supercluster","options","radius","maxZoom","height","width","key","process","env","REACT_APP_GOOGLE_KEY","lat","lng","current","nw","se","isCluster","point_count","pointCount","length","expansionZoom","Math","min","getClusterExpansionZoom","panTo"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport useSwr from \"swr\";\nimport GoogleMapReact from \"google-map-react\";\nimport useSupercluster from \"use-supercluster\";\nimport Modal from \"react-modal\";\nimport ModalComponent from \"../../components/modal/ModalComponent\";\nimport './userMap.css';\nimport {social_Distancing_MapData} from '../../dummyData'\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst Marker = ({ children }) => children;\n\nModal.setAppElement(\"#root\");\n\nconst UserMap = () => {\n\n  const mapRef = useRef();\n  const [bounds, setBounds] = useState(null);\n  const [zoom, setZoom] = useState(10);\n  const [isOpen, setIsOpen] = useState(false);\n  const [person,setPerson] = useState(null);\n  const [employeeId,setEmployeeId] = useState(null);\n    function toggleModal(event,personName,empId) {       \n        setIsOpen(!isOpen);\n        setPerson(personName);\n        setEmployeeId(empId)\n    }\n\n//   const url =\n//     \"https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10\";\n\n//   const { data, error } = useSwr(url, { fetcher });\n//   const peopleClusterData = data && !error ? data.slice(0, 200) : [];\n\n  const data = social_Distancing_MapData;\n  const peopleClusterData = data.slice(0, 10);\n\n  const points = peopleClusterData.map(people => ({\n    type: \"Feature\",\n    properties: { cluster: false, peopleId: people.id, category: people.category,username:people.location.person.name,empId:people.location.person.id },\n    geometry: {\n      type: \"Point\",\n      coordinates: [\n        parseFloat(people.location.longitude),\n        parseFloat(people.location.latitude)\n      ]\n    }\n  }));\n\n  const { clusters, supercluster } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 20 }\n  });\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100%\" }}>\n        <ModalComponent \n        isOpen={isOpen} \n        toggleModal={toggleModal}\n        person={person}\n        employeeId={employeeId}\n          />\n\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_KEY }}\n        defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n        defaultZoom={10}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map }) => {\n          mapRef.current = map;\n        }}\n        onChange={({ zoom, bounds }) => {\n          setZoom(zoom);\n          setBounds([\n            bounds.nw.lng,\n            bounds.se.lat,\n            bounds.se.lng,\n            bounds.nw.lat\n          ]);\n        }}\n      >\n        {clusters.map(cluster => {\n          const [longitude, latitude] = cluster.geometry.coordinates;\n          const {\n            cluster: isCluster,\n            point_count: pointCount\n          } = cluster.properties;\n\n          if (isCluster) {\n            return (\n              <Marker\n                key={`cluster-${cluster.id}`}\n                lat={latitude}\n                lng={longitude}\n              >\n                <div\n                  className=\"cluster-marker\"\n                  style={{\n                    width: `${10 + (pointCount / points.length) * 20}px`,\n                    height: `${10 + (pointCount / points.length) * 20}px`\n                  }}\n                  onClick={() => {\n                    const expansionZoom = Math.min(\n                      supercluster.getClusterExpansionZoom(cluster.id),\n                      20\n                    );\n                    mapRef.current.setZoom(expansionZoom);\n                    mapRef.current.panTo({ lat: latitude, lng: longitude });\n                  }}\n                >\n                  {pointCount}\n                </div>\n              </Marker>\n            );\n          }\n\n          return (\n            <Marker\n              key={`people-${cluster.properties.peopleId}`}\n              lat={latitude}\n              lng={longitude}\n            >\n              <button className=\"people-marker\" onClick={(event)=>{\n                  toggleModal(event,cluster.properties.username,cluster.properties.empId);\n              }}>\n               \n                <img src=\"/person.svg\" alt=\"person\" />\n              </button>\n           \n            </Marker>\n          );\n        })}\n      </GoogleMapReact>\n    </div>\n  );\n}\n\nexport default UserMap\n"]},"metadata":{},"sourceType":"module"}